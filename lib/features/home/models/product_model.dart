class Product {
  String? id; // Unique product ID (auto-generated by Firebase)
  String name; // Product name (e.g., "Air Max 90")
  String description; // Product description
  String brandId; // Reference to brand (stored as brand document ID)
  String categoryId; // Reference to category (stored as category document ID)
  double? price; // Price of the shoe
  double? discountPrice; // Optional discounted price
  int stockQuantity; // Available stock
  List<String> imageUrls; // List of image URLs from Cloudinary
  List<String> sizes; // Available sizes (e.g., ["7", "8", "9"])
  List<String> colors;

  Product({
    this.id,
    required this.name,
    required this.description,
    required this.brandId,
    required this.categoryId,
    required this.price,
    this.discountPrice,
    required this.stockQuantity,
    required this.imageUrls,
    required this.sizes,
    required this.colors,
  });

  factory Product.fromFirestore(Map<String, dynamic> json, String id) =>
      Product(
        id: id,
        name: json['name'] ?? '',
        description: json['description'] ?? '',
        brandId: json['brandId'] ?? '',
        categoryId: json['categoryId'] ?? '',
        price:
            (json['price'] is String)
                ? double.tryParse(json['price'])
                : json['price']?.toDouble(),
        discountPrice:
            (json['discountPrice'] is String)
                ? double.tryParse(json['discountPrice'])
                : json['discountPrice'].toDouble(),
        stockQuantity: json['stockQuantity'] ?? '',
        imageUrls: List<String>.from(json['imageUrls']),
        sizes: List<String>.from(json['sizes']),
        colors: List<String>.from(json['colors']),
      );
}
